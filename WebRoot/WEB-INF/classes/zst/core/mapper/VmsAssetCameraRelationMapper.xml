<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="zst.core.dao.VmsAssetCameraRelationMapper" >
  <resultMap id="BaseResultMap" type="zst.core.entity.VmsAssetCameraRelation" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="asset_id" property="assetId" jdbcType="INTEGER" />
    <result column="camera_id" property="cameraId" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, asset_id, camera_id, type
  </sql>
  
  <!-- where关系 -->
  <sql id="Example_Where_Clause">
	where 1=1
	<if test="assetId != null ">
		AND asset_id = #{assetId,jdbcType=INTEGER}
	</if>
	<if test="cameraId != null ">
		AND camera_id = #{cameraId,jdbcType=INTEGER}
	</if>
	<if test="type != null ">
		AND type = #{type,jdbcType=INTEGER}
	</if>
  </sql>
  
  <!-- 批量查询 -->
  <select id="selectListByObj" parameterType="zst.core.entity.VmsAssetCameraRelation" resultMap="BaseResultMap">		
	select <include refid="Base_Column_List" />
		from vms_asset_camera
	<include refid="Example_Where_Clause" />
  </select>
  
  <!-- 批量插入 -->
  <insert id="insertBatch" parameterType="java.util.List" >
     insert into vms_asset_camera (asset_id, camera_id, type)
     values
    <foreach collection="list" item="item" index="index" separator="," >
        	(#{item.assetId,jdbcType=INTEGER}, #{item.cameraId,jdbcType=INTEGER}, #{item.type,jdbcType=INTEGER})
    </foreach> 
  </insert>
  
  <!-- 删除设备时根据设备id查询是否有关联设备 -->
  <select id="selectCountByAsset" parameterType="java.util.List" resultType="long">
		SELECT COUNT(1) COUN FROM vms_asset_camera
		where
		type = 1
		and
		asset_id in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
		 	#{item,jdbcType=INTEGER}
		</foreach>
		or
		camera_id in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
		 	#{item,jdbcType=INTEGER}
		</foreach>
  </select>

  <!-- 通过设备id和使用方式type两个参数批量删除 -->
  <delete id="deleteByObj" parameterType="zst.core.entity.VmsAssetCameraRelation" >
    delete from vms_asset_camera
    where asset_id = #{assetId,jdbcType=INTEGER}
    and type = #{type,jdbcType=INTEGER}
  </delete>  
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from vms_asset_camera
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from vms_asset_camera
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="zst.core.entity.VmsAssetCameraRelation" >
    insert into vms_asset_camera (id, asset_id, camera_id, 
      type)
    values (#{id,jdbcType=INTEGER}, #{assetId,jdbcType=INTEGER}, #{cameraId,jdbcType=INTEGER}, 
      #{type,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="zst.core.entity.VmsAssetCameraRelation" >
    insert into vms_asset_camera
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="assetId != null" >
        asset_id,
      </if>
      <if test="cameraId != null" >
        camera_id,
      </if>
      <if test="type != null" >
        type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="assetId != null" >
        #{assetId,jdbcType=INTEGER},
      </if>
      <if test="cameraId != null" >
        #{cameraId,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="zst.core.entity.VmsAssetCameraRelation" >
    update vms_asset_camera
    <set >
      <if test="assetId != null" >
        asset_id = #{assetId,jdbcType=INTEGER},
      </if>
      <if test="cameraId != null" >
        camera_id = #{cameraId,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="zst.core.entity.VmsAssetCameraRelation" >
    update vms_asset_camera
    set asset_id = #{assetId,jdbcType=INTEGER},
      camera_id = #{cameraId,jdbcType=INTEGER},
      type = #{type,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>