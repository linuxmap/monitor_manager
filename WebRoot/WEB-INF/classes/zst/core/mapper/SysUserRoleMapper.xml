<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="zst.core.dao.SysUserRoleMapper" >
  <resultMap id="BaseResultMap" type="zst.core.entity.SysUserRole" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="role_id" property="roleId" jdbcType="INTEGER" />
  </resultMap>
  
  <resultMap id="BaseResultUserInfoMap" type="zst.core.entity.SysUserRole" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="login_name" property="userName" jdbcType="INTEGER" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    id, user_id, role_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from zst_user_role
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  <select id="selectByRoleIdList" resultMap="BaseResultMap" parameterType="java.util.List" >
    select 
    <include refid="Base_Column_List" />
    from zst_user_role
    where role_id in
    <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
		#{item}
	</foreach>
  </select>
  
  <!--根据用户id集合删除用户角色信息  -->
  <delete id="deleteByUserIdList" parameterType="java.util.List" >
    delete from zst_user_role
    where user_id in
    <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
		#{item}
	</foreach>
  </delete>
  
  <!-- 根据角色id查找所有关联用户id 联表查询 -->
  <select id="selectByRoleId" resultMap="BaseResultUserInfoMap" parameterType="java.lang.Integer" >
    select 
    zst_user_role.id as id, zst_user_role.user_id as user_id, zst_user_role.role_id as role_id, zst_user.login_name as login_name
    from zst_user_role
    left join
    zst_user on zst_user.user_id = zst_user_role.user_id
    where
    zst_user.status = 1
    and
    zst_user_role.role_id = #{roleId,jdbcType=INTEGER}
  </select>
  
  <!-- 根据用户id查找所有关联角色关系 -->
  <select id="selectByUserId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from zst_user_role
    where user_id = #{roleId,jdbcType=INTEGER}
  </select>  
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from zst_user_role
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <!--根据用户id删除用户角色信息  -->
  <delete id="deleteByUserId" parameterType="java.lang.Integer" >
    delete from zst_user_role
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  
    <!--根据角色id删除用户角色信息  -->
  <delete id="deleteByRoleId" parameterType="java.lang.Integer" >
    delete from zst_user_role
    where role_id = #{roleId,jdbcType=INTEGER}
  </delete>
  
  <!-- 批量插入 -->
  <insert id="insertBatch" parameterType="java.util.List">
   	insert into zst_user_role (user_id, role_id ) 
   	values
   	<foreach collection="list" item="item" index="index" separator="," >  
 	 (
 		#{item.userId,jdbcType=INTEGER}, #{item.roleId,jdbcType=INTEGER}
     )
    </foreach> 
  </insert>
  
  <!-- 批量删除 -->
  <delete id="deleteBatch" parameterType="java.util.List" >
	    delete from
	    	zst_user_role
	    where
	  	<foreach collection="list" item="item" index="index" separator="or" >
	  		(
		    	user_id = #{item.userId,jdbcType=INTEGER}
		    and
		    	role_id = #{item.roleId,jdbcType=INTEGER}
	    	)
    	</foreach>
  </delete>  
  
  <insert id="insert" parameterType="zst.core.entity.SysUserRole" >
    insert into zst_user_role (id, user_id, role_id )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="zst.core.entity.SysUserRole" >
    insert into zst_user_role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="zst.core.entity.SysUserRole" >
    update zst_user_role
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="zst.core.entity.SysUserRole" >
    update zst_user_role
    set user_id = #{userId,jdbcType=INTEGER},
      role_id = #{roleId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>